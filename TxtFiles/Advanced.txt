*Keeping It Semantic: @extend
----------------------------------
There are often cases when designing a page when one class should have all the styles of another class, as well as its own specific styles. The most common way of handling this is to use both the more general class and the more specific class in the HTML. For example, suppose we have a design for a normal error and also for a serious error. We might write our markup like so:
The @extend directive avoids these problems by telling Sass that one selector should inherit the styles of another selector. For example:
++++++++++++++++++++++++++++
.error {
  border: 1px #f00;
  background-color: #fdd;
}
.seriousError {
  @extend .error;
  border-width: 3px;
}
++++++++++++++++++++++++++++++
is compiled to:
++++++++++++++++++++++++++++++
.error, .seriousError {
  border: 1px #f00;
  background-color: #fdd;
}

.seriousError {
  border-width: 3px;
}
+++++++++++++++++++++++++++++++
************************************************************************************
Keeping Code Clean with Mixins
----------------------------------
Mixins are included in the document with the @include directive. This takes the name of a mixin and optionally arguments to pass to it, and includes the styles defined by that mixin into the current rule. For example:
+++++++++++++++++++++++++
@mixin large-text {
  font: {
    family: Arial;
    size: 20px;
    weight: bold;
  }
  color: #ff0000;
}
.page-title {
  @include large-text;
  padding: 4px;
  margin-top: 10px;
}
++++++++++++++++++++++++
is compiled to:

+++++++++++++++++++++++++
.page-title {
  font-family: Arial;
  font-size: 20px;
  font-weight: bold;
  color: #ff0000;
  padding: 4px;
  margin-top: 10px; }
++++++++++++++++++++++++++++++++
**************************************************************************
Function
---------
It is possible to define your own functions in sass and use them in any value or script context. For example:
++++++++++++++++++++++++++++++++
$grid-width: 40px;
$gutter-width: 10px;

@function grid-width($n) {
  @return $n * $grid-width + ($n - 1) * $gutter-width;
}

#sidebar { width: grid-width(5); }
+++++++++++++++++++++++++++++++++++
Becomes:
++++++++++++++++++++++++++++++++++
#sidebar {
  width: 240px; }
+++++++++++++++++++++++++++++++++++
*********************************************************************************
media
---------------------
@media directives in Sass behave just like they do in plain CSS, with one extra capability: they can be nested in CSS rules. If a @media directive appears within a CSS rule, it will be bubbled up to the top level of the stylesheet, putting all the selectors on the way inside the rule. This makes it easy to add media-specific styles without having to repeat selectors or break the flow of the stylesheet. For example:
+++++++++++++++++++++++++++++++++++++
.sidebar {
  width: 300px;
  @media screen and (orientation: landscape) {
    width: 500px;
  }
}
+++++++++++++++++++++++++++++++++++++++
is compiled to:
++++++++++++++++++++++++++++++++++++++++++++
.sidebar {
  width: 300px; }
  @media screen and (orientation: landscape) {
    .sidebar {
      width: 500px; } }
+++++++++++++++++++++++++++++++++++++++++++
************************************************************

