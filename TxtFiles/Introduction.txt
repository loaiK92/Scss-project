**Sass (stylesheet language)
------------------------------------------
Sass (syntactically awesome stylesheets) is a style sheet language initially designed by Hampton Catlin and developed by Natalie Weizenbaum. After its initial versions, Weizenbaum and Chris Eppstein continued to extend Sass with SassScript, a simple scripting language used in Sass files.
Sass is a scripting language that is interpreted or compiled into Cascading Style Sheets (CSS). SassScript is the scripting language itself. Sass consists of two syntaxes. The original syntax, called "the indented syntax", uses a syntax similar to Haml. It uses indentation to separate code blocks and newline characters to separate rules. The newer syntax, "SCSS", uses block formatting like that of CSS. It uses braces to denote code blocks and semicolons to separate lines within a block. The indented syntax and SCSS files are traditionally given the extensions .sass and .scss, respectively.
Features:
-Fully CSS-compatible
-Language extensions such as variables, nesting, and mixins
-Many useful functions for manipulating colors and other values
-Advanced features like control directives for libraries
-Well-formatted, customizable output

when should we learn Scss/Sass?
Sass is for people who know the pain of working on
the CSS of a mature website—who have faced a CSS file that
four people wrote and that mutated into a huge, sprawling,
incoherent mess. We’ve looked the beast in the eye and
barely survived.
You’re probably already familiar with CSS, HTML, and the
ideals of semantic web development. We can all agree that
markup should be about logic instead of about presentation
(as much as possible). And we’ll assume that you’re familiar
with margins, padding, the box model, @media queries, and
the myriad of other CSS-related technologies.
If you are looking for a CSS-ninja power-up, you’ve come
to the right place.


*******************************************************************
*******************************************************************
**Installing Sass
---------------------------
So before you can explore the simplicity (and beauty) of Sass, you’ll
need to set a few things up. It’s useful to have a folder where you keep
all your Sass files for a project. Creating a Sass file couldn’t be easier:
just use the extension .scss—or .sass for an Original Sass file.
The only tool you need is a text editor. Every OS comes with something,
but of course that’s not always the best something. Generally, just use
whatever you usually use to write CSS. We recommend some text
editors with each set of installation instructions.
In order to install and run Sass, you need to have Ruby installed on
your system. We’ll go through how to do this in the three major OS
categories.

****Installation on Windows
Because Windows doesn’t come with Ruby, you’ll need to install it.
There are a few installers around the Internet, but we preferthe simple
one at RubyInstaller.4
Once Ruby has been installed, you need to access the command line.
Go to Start, then Accessories, then find Command Prompt. That should
open a window that will allow you to run the needed install commands.
A decent text editor for Windows is Notepad++.
****Installation on a Mac

Unlike Windows, Ruby is already installed on OS X, making things a
bit easier. All we need to do is open the Terminal application and install
Sass via the command line. The text editor that we use on our Macs is
TextMate.

****Installation for Linux
If you’re a Linux user, you’ll be aware of how to access your command
line—we won’t insult your Unix-fu. To install Ruby (and Ruby gems),
use your package manager. We recommend Ruby version 1.9.2. As
for text editors, Vim tends to be the most popular.

➤ Use this command to install Sass.
gem install sass
➤ Create a simple Sass file.
Name a file test.scss with the following contents:
.red {
color: red;
}
➤ Test that Sass is working.
Navigate to the folder containing the test.scss file via the command
line and you should see the following if you run the command sass
test.scss.
$> sass test.scss
.red {
color: red; }
It just reformatted the CSS we wrote above. Now we’re ready to show
you how to rock some Sass superpowers.

******************************************************************************
**Compiling Sass into CSS
------------------------
First, we need to create a Sass file. Any old thing will do—this is just
to show how we can turn our Sass into CSS. Since CSS is valid Sass,
take any random CSS file you have sitting around and change its
extension to .scss.
Now, let’s go to our command line. Type sass, followed by the name
of your file.
Look at that! Oh right, it just printed out the CSS but in a different
format. And printing out your CSS files to the console isn’t very useful.
It would be better if we could make a separate CSS file.
Well, you can! Run the sass command again with a second argument
that specifies the output file you want. For instance, you might say
sass test.scss test.css and Sass will generate a CSS file named test.css.
Running that command over and over would be extremely tedious as
we edit our Sass file. If you are using Rails or another framework, it
can automatically update your CSS for you. But when we aren’t using
a framework, we have a neat command-line trick for converting Sass
files into CSS files as we alter them. It’s called watch.
watch will take any .scss file found in the specified Sass folder and
convert it into a .css file in the specified CSS folder. Magic! It doesn’t
just do this once either. It constantly watches the file for any changes
and incorporates them into the CSS file.
Another useful command to mention here is convert. You can use this
to turn a .css file into a .sass or .scss file.

➤ Start with a simple bit of Sass.
.fab_text {
color: #336699;
font-size: 2em;
}
➤ Type this in your command line.
sass fabtext.scss
You should see the following:
.fab_text {
color: #336699;
font-size: 2em; }
➤ Watch a folder.
Assuming we have a Sass and a CSS folder, the command would look
like this:
sass --watch stylesheets/sass:stylesheets/css
➤ Convert a CSS file to a Sass file.
sass convert test.css test.sass
*********************************************************************************


